name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  package:
    name: Create NuGet Packages
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Create NuGet packages
      run: |
        dotnet pack src/Liquid.Net.Core/Liquid.Net.Core.csproj --no-build --configuration Release --output ./packages
        dotnet pack src/Liquid.Net.Models/Liquid.Net.Models.csproj --no-build --configuration Release --output ./packages
        dotnet pack src/Liquid.Net.Training/Liquid.Net.Training.csproj --no-build --configuration Release --output ./packages
        dotnet pack src/Liquid.Net.Utilities/Liquid.Net.Utilities.csproj --no-build --configuration Release --output ./packages
        
    - name: Upload NuGet packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
        
    - name: Publish to NuGet (if secrets are configured)
      if: github.event_name == 'release' && env.NUGET_API_KEY != ''
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        dotnet nuget push ./packages/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json --skip-duplicate

  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run benchmark infrastructure tests
      run: |
        echo "Testing benchmark infrastructure with small samples..."
        dotnet run --project src/Liquid.Net.Benchmarks/Liquid.Net.Benchmarks.csproj --configuration Release ci
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-test-results
        path: |
          *.log
          test-results/
        if-no-files-found: ignore